// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia.proto

/*
	Package celestia is a generated protocol buffer package.

	It is generated from these files:
		celestia.proto

	It has these top-level messages:
		DataAvailabilityHeader
		Request
		Shares
		StateRevelantMessages
*/
package celestia

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tendermint_types1 "github.com/tendermint/tendermint/proto/tendermint/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataAvailabilityHeader struct {
	RowRoots    [][]byte `protobuf:"bytes,1,rep,name=row_roots,json=rowRoots" json:"row_roots,omitempty"`
	ColumnRoots [][]byte `protobuf:"bytes,2,rep,name=column_roots,json=columnRoots" json:"column_roots,omitempty"`
}

func (m *DataAvailabilityHeader) Reset()                    { *m = DataAvailabilityHeader{} }
func (m *DataAvailabilityHeader) String() string            { return proto.CompactTextString(m) }
func (*DataAvailabilityHeader) ProtoMessage()               {}
func (*DataAvailabilityHeader) Descriptor() ([]byte, []int) { return fileDescriptorCelestia, []int{0} }

func (m *DataAvailabilityHeader) GetRowRoots() [][]byte {
	if m != nil {
		return m.RowRoots
	}
	return nil
}

func (m *DataAvailabilityHeader) GetColumnRoots() [][]byte {
	if m != nil {
		return m.ColumnRoots
	}
	return nil
}

type Request struct {
	// NamespaceID identifies the namespace in Celestia chain.
	NamespaceId []byte `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// DataAvailabilityHeader identifies the block in Celestia chain.
	Dah *tendermint_types1.DataAvailabilityHeader `protobuf:"bytes,2,opt,name=dah" json:"dah,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorCelestia, []int{1} }

func (m *Request) GetNamespaceId() []byte {
	if m != nil {
		return m.NamespaceId
	}
	return nil
}

func (m *Request) GetDah() *tendermint_types1.DataAvailabilityHeader {
	if m != nil {
		return m.Dah
	}
	return nil
}

type Shares struct {
	Shares [][]byte `protobuf:"bytes,1,rep,name=shares" json:"shares,omitempty"`
}

func (m *Shares) Reset()                    { *m = Shares{} }
func (m *Shares) String() string            { return proto.CompactTextString(m) }
func (*Shares) ProtoMessage()               {}
func (*Shares) Descriptor() ([]byte, []int) { return fileDescriptorCelestia, []int{2} }

func (m *Shares) GetShares() [][]byte {
	if m != nil {
		return m.Shares
	}
	return nil
}

type StateRevelantMessages struct {
	Txs                    [][]byte                                  `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
	IntermediateStateRoots *tendermint_types1.IntermediateStateRoots `protobuf:"bytes,2,opt,name=intermediate_state_roots,json=intermediateStateRoots" json:"intermediate_state_roots,omitempty"`
	Evidence               *tendermint_types1.EvidenceList           `protobuf:"bytes,3,opt,name=evidence" json:"evidence,omitempty"`
}

func (m *StateRevelantMessages) Reset()                    { *m = StateRevelantMessages{} }
func (m *StateRevelantMessages) String() string            { return proto.CompactTextString(m) }
func (*StateRevelantMessages) ProtoMessage()               {}
func (*StateRevelantMessages) Descriptor() ([]byte, []int) { return fileDescriptorCelestia, []int{3} }

func (m *StateRevelantMessages) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *StateRevelantMessages) GetIntermediateStateRoots() *tendermint_types1.IntermediateStateRoots {
	if m != nil {
		return m.IntermediateStateRoots
	}
	return nil
}

func (m *StateRevelantMessages) GetEvidence() *tendermint_types1.EvidenceList {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func init() {
	proto.RegisterType((*DataAvailabilityHeader)(nil), "celestia.DataAvailabilityHeader")
	proto.RegisterType((*Request)(nil), "celestia.Request")
	proto.RegisterType((*Shares)(nil), "celestia.Shares")
	proto.RegisterType((*StateRevelantMessages)(nil), "celestia.StateRevelantMessages")
}
func (m *DataAvailabilityHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataAvailabilityHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RowRoots) > 0 {
		for _, b := range m.RowRoots {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCelestia(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ColumnRoots) > 0 {
		for _, b := range m.ColumnRoots {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCelestia(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NamespaceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCelestia(dAtA, i, uint64(len(m.NamespaceId)))
		i += copy(dAtA[i:], m.NamespaceId)
	}
	if m.Dah != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCelestia(dAtA, i, uint64(m.Dah.Size()))
		n1, err := m.Dah.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Shares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shares) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for _, b := range m.Shares {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCelestia(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *StateRevelantMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateRevelantMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCelestia(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.IntermediateStateRoots != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCelestia(dAtA, i, uint64(m.IntermediateStateRoots.Size()))
		n2, err := m.IntermediateStateRoots.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Evidence != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCelestia(dAtA, i, uint64(m.Evidence.Size()))
		n3, err := m.Evidence.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Celestia(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Celestia(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCelestia(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DataAvailabilityHeader) Size() (n int) {
	var l int
	_ = l
	if len(m.RowRoots) > 0 {
		for _, b := range m.RowRoots {
			l = len(b)
			n += 1 + l + sovCelestia(uint64(l))
		}
	}
	if len(m.ColumnRoots) > 0 {
		for _, b := range m.ColumnRoots {
			l = len(b)
			n += 1 + l + sovCelestia(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovCelestia(uint64(l))
	}
	if m.Dah != nil {
		l = m.Dah.Size()
		n += 1 + l + sovCelestia(uint64(l))
	}
	return n
}

func (m *Shares) Size() (n int) {
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for _, b := range m.Shares {
			l = len(b)
			n += 1 + l + sovCelestia(uint64(l))
		}
	}
	return n
}

func (m *StateRevelantMessages) Size() (n int) {
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovCelestia(uint64(l))
		}
	}
	if m.IntermediateStateRoots != nil {
		l = m.IntermediateStateRoots.Size()
		n += 1 + l + sovCelestia(uint64(l))
	}
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovCelestia(uint64(l))
	}
	return n
}

func sovCelestia(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCelestia(x uint64) (n int) {
	return sovCelestia(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataAvailabilityHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataAvailabilityHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataAvailabilityHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowRoots = append(m.RowRoots, make([]byte, postIndex-iNdEx))
			copy(m.RowRoots[len(m.RowRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnRoots = append(m.ColumnRoots, make([]byte, postIndex-iNdEx))
			copy(m.ColumnRoots[len(m.ColumnRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCelestia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = append(m.NamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.NamespaceId == nil {
				m.NamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dah", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dah == nil {
				m.Dah = &tendermint_types1.DataAvailabilityHeader{}
			}
			if err := m.Dah.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCelestia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, make([]byte, postIndex-iNdEx))
			copy(m.Shares[len(m.Shares)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCelestia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateRevelantMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateRevelantMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateRevelantMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediateStateRoots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntermediateStateRoots == nil {
				m.IntermediateStateRoots = &tendermint_types1.IntermediateStateRoots{}
			}
			if err := m.IntermediateStateRoots.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCelestia
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &tendermint_types1.EvidenceList{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCelestia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCelestia(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCelestia
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCelestia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCelestia
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCelestia
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCelestia(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCelestia = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCelestia   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("celestia.proto", fileDescriptorCelestia) }

var fileDescriptorCelestia = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x37, 0x50, 0xeb, 0xb9, 0xd7, 0x4b, 0x1c, 0xb0, 0x84, 0xaa, 0x31, 0x66, 0xd5,
	0x55, 0x84, 0xba, 0x10, 0xba, 0xf3, 0x0b, 0x2c, 0xe8, 0x66, 0x8a, 0xe0, 0xae, 0x4c, 0x93, 0x83,
	0x1d, 0xc8, 0x47, 0x9d, 0x39, 0x4d, 0xed, 0x9b, 0xf8, 0x48, 0xba, 0xf3, 0x11, 0xa4, 0xfa, 0x20,
	0x32, 0xf9, 0x6a, 0xa1, 0xd1, 0x4d, 0x98, 0x73, 0xe6, 0x77, 0xfe, 0xf9, 0xcf, 0x7f, 0x06, 0x6e,
	0x63, 0x4c, 0xd1, 0x90, 0x92, 0xd1, 0x56, 0x17, 0x54, 0xf0, 0x51, 0x5b, 0x4f, 0x1e, 0x11, 0xe6,
	0x09, 0xea, 0x4c, 0xe5, 0xf4, 0x8c, 0x0e, 0x5b, 0x34, 0xf5, 0xb7, 0xe6, 0xc2, 0x4f, 0x30, 0x7e,
	0x23, 0x49, 0xbe, 0x2c, 0xa5, 0x4a, 0xe5, 0x5a, 0xa5, 0x8a, 0x0e, 0xef, 0x50, 0x26, 0xa8, 0xf9,
	0x43, 0xb8, 0xab, 0x8b, 0xfd, 0x4a, 0x17, 0x05, 0x19, 0x8f, 0x05, 0xce, 0xf4, 0x46, 0x8c, 0x74,
	0xb1, 0x17, 0xb6, 0xe6, 0x4f, 0xe1, 0x26, 0x2e, 0xd2, 0x5d, 0x96, 0x37, 0xfb, 0x57, 0xd5, 0xfe,
	0x75, 0xdd, 0xab, 0x90, 0x70, 0x03, 0x77, 0x04, 0x7e, 0xd9, 0xa1, 0x21, 0x4b, 0xe7, 0x32, 0x43,
	0xb3, 0x95, 0x31, 0xae, 0x54, 0xe2, 0xb1, 0x80, 0x59, 0xba, 0xeb, 0x2d, 0x12, 0x3e, 0x07, 0x27,
	0x91, 0x1b, 0xef, 0x2a, 0x60, 0xd3, 0xeb, 0xd9, 0x34, 0x3a, 0x79, 0x8e, 0x6a, 0xb7, 0xfd, 0x26,
	0x85, 0x1d, 0x0a, 0x03, 0x18, 0x2e, 0x37, 0x52, 0xa3, 0xe1, 0x63, 0x18, 0x9a, 0x6a, 0xd5, 0x18,
	0x6e, 0xaa, 0xf0, 0x07, 0x83, 0x07, 0x4b, 0x92, 0x84, 0x02, 0x4b, 0x4c, 0x65, 0x4e, 0x1f, 0xd0,
	0x18, 0xf9, 0x19, 0x0d, 0x77, 0xc1, 0xa1, 0xaf, 0x2d, 0x6e, 0x97, 0x7c, 0x0d, 0x9e, 0xca, 0x09,
	0x75, 0x86, 0x89, 0x92, 0x84, 0x2b, 0x63, 0xe7, 0xba, 0x63, 0xfe, 0xc3, 0xde, 0xe2, 0x6c, 0xa2,
	0xfe, 0x91, 0xe5, 0xc5, 0x58, 0xf5, 0xf6, 0xf9, 0x1c, 0x46, 0x58, 0xaa, 0x04, 0xf3, 0x18, 0x3d,
	0xa7, 0xd2, 0xf4, 0x2f, 0x35, 0xdf, 0x36, 0xc4, 0x7b, 0x65, 0x48, 0x74, 0xfc, 0xec, 0x0f, 0x83,
	0x7b, 0x36, 0x0d, 0x81, 0xa4, 0x15, 0x96, 0xa8, 0xf9, 0x0b, 0xb8, 0x6d, 0x8b, 0x26, 0x87, 0xfb,
	0x51, 0xf7, 0x1c, 0x9a, 0x3b, 0x98, 0xb8, 0xa7, 0x56, 0x0d, 0x85, 0x03, 0xfe, 0x11, 0x1e, 0x77,
	0x83, 0x75, 0x3a, 0x29, 0x96, 0xe7, 0xe9, 0xf4, 0xe8, 0x3c, 0x39, 0xd3, 0xe9, 0x4b, 0x34, 0x1c,
	0xf0, 0xd7, 0xe0, 0xb6, 0xb2, 0xff, 0x53, 0x9a, 0x5c, 0x1e, 0xf9, 0x24, 0xf2, 0xca, 0xfd, 0x7e,
	0xf4, 0xd9, 0xcf, 0xa3, 0xcf, 0x7e, 0x1d, 0x7d, 0xf6, 0xed, 0xb7, 0x3f, 0x58, 0x0f, 0xab, 0x17,
	0xfb, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xae, 0xe9, 0x69, 0xeb, 0x02, 0x00, 0x00,
}
